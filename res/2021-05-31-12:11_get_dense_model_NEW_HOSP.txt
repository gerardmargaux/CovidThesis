def get_dense_model(batch_input_shape, use_lambda=True):
    model = Sequential()
    if use_lambda:
        model.add(Lambda(lambda x: x[:,:,target_idx], batch_input_shape=batch_input_shape))  # select only the target of the previous days
        model.add(Dense(n_forecast))   # predict the next target based on the previous ones
    else:
        model.add(Dense(1, batch_input_shape=batch_input_shape))
        model.add(Reshape((n_samples,)))
        model.add(Dense(n_forecast))
    model.compile(loss=tf.losses.MeanSquaredError(),
                          metrics=['mse', 'mae', tf.keras.metrics.RootMeanSquaredError()])
    return model


epochs = 3000, es_stop_val = False

n_samples = 30, n_forecast = 20
data = ['NEW_HOSP', 'TOT_HOSP', 'TOT_HOSP_log', 'TOT_HOSP_pct', 'Fièvre', 'Mal de gorge', 'Agueusie', 'Symptôme', 'NEW_Fièvre', 'NEW_Mal de gorge', 'NEW_Agueusie', 'NEW_Symptôme']
target = NEW_HOSP
scaling = <class 'sklearn.preprocessing._data.MinMaxScaler'>, scaling type = batch
nb init regions = 23, nb augmented regions = 0
regions = ['AT', 'BE', 'BG', 'CZ', 'DK', 'EE', 'ES', 'FI', 'FR', 'GB', 'HR', 'HU', 'IE', 'IT', 'LT', 'LV', 'NL', 'NO', 'PL', 'PT', 'SE', 'SI', 'SK']